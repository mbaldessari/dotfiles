# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
export GTK_IM_MODULE=ibus
#export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus


# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="michele"
SOLARIZED_THEME="dark"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
#ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
	#kube-ps1
plugins=(
  colored-man-pages
	colorize
	copyzshell
	emoji
	fz
	git
	git-prompt
	git-extras
	github
	kube-ps1
	web-search
	you-should-use
	z
	zsh-autosuggestions
	zsh-syntax-highlighting
)

# User configuration

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$HOME/Bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
export RIPGREP_CONFIG_PATH=~/.config/ripgreprc
# export MANPATH="/usr/local/man:$MANPATH"

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

export EDITOR='nvim'
export CSCOPE_EDITOR=nvim
alias vim='nvim'

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
RPM_PACKAGER="Michele Baldessari <michele@acksyn.org>"
MAILTO="michele@acksyn.org"

alias ds='du -hcs -- * | sort -h'
alias more='less -F -X'
alias less='less -F -X'
alias sway="sway > /tmp/sway.log 2>&1"
alias csrapprove="oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs --no-run-if-empty oc adm certificate approve"
alias k='kubectl'
alias vpgrep='grep -iR --exclude-dir="tests" --exclude-dir="vendor"'
alias vp='cd ~/Engineering/cloud-patterns/'
alias mcg='cd ~/Engineering/cloud-patterns/multicloud-gitops/'
alias ie='cd ~/Engineering/cloud-patterns/industrial-edge//'
alias lab='pushd ~/Engineering/Labs/kvm-sno; make get-remote-pki; popd'
alias ocwho='oc whoami --show-console'

function h2d { echo "obase=10; ibase=16; $( echo "$*" | sed -e 's/0x//g' -e 's/\([a-z]\)/\u\1/g' )" | bc; }
function h2o { echo "obase=8; ibase=16; $( echo "$*" | sed -e 's/0x//g' -e 's/\([a-z]\)/\u\1/g' )" | bc; }
function h2b { echo "obase=2; ibase=16; $( echo "$*" | sed -e 's/0x//g' -e 's/\([a-z]\)/\u\1/g' )" | bc; }
function b2d { echo "obase=10; ibase=2; "$*"" | bc; }
function b2h { echo "0x$(echo "obase=16; ibase=2;"$*"" | bc)"; }
function d2b { echo "obase=2; ibase=10; "$*"" | bc; }
function d2h { echo "0x$(echo "obase=16; ibase=10; "$*"" | bc)"; }
function o2d { echo "obase=10; ibase=8; $( echo "$*" | sed -e 's/0x//g' -e 's/\([a-z]\)/\u\1/g' )" | bc; }

function cgrep { find . -type f -iname "*.[ch]"  -print0 | xargs -0 grep -nH "$*"; }
function ccgrep { find . -type f -iname "*.[ch]" -o -iname "*.java" -o -iname "*.py" > /tmp/cocci_list.txt; coccigrep "$*" -c  -l /tmp/cocci_list.txt; }
function ifind { find . -type f -iname '*'$*'*'; }

alias sshu='ssh -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no'
alias scpu='scp -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no'

ospgrep() {
  grep -E "\s\b(E[rR]{2}:?|alert|Traceback|TRACE|crit|fatal|HANDLER|TASK|PLAY|Unexpected|FAIL|[Ff]ail|denied|non-zero|[Tt]ime[d\s]?out|UNCAUGHT|EXCEPTION|Unknown|[Aa]ssertion|inuse)" $* |grep -v '0 failures'
}

vpoperatorlogs() {
  oc logs -n openshift-operators $(oc get pods -n openshift-operators |grep patterns | awk '{ print $1 }')
}

vpexecoperator() {
    oc exec -it -n openshift-operators `oc get pods -n openshift-operators |grep patterns-operator | awk '{ print $1 }'` -- bash
}

SSH_ENV="$HOME/.ssh/environment"
function start_agent {
        echo "Initialising new SSH agent..."
        /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
        echo succeeded
        chmod 600 "${SSH_ENV}"
        . "${SSH_ENV}" > /dev/null
        /usr/bin/ssh-add -t 432000 ;
}

debugpod() {
  cat > /tmp/debugpod.yaml<<EOF
apiVersion: v1
kind: Pod
metadata:
  name: bandini
  namespace: imperative
spec:
  serviceAccount: imperative-sa
  containers:
    - image: quay.io/hybridcloudpatterns/utility-container:latest
      name: bandini
      command: ["/usr/bin/sleep", "infinity"]
EOF

  oc apply -f /tmp/debugpod.yaml
  while true; do
     oc get -n imperative pod/bandini |grep Running
     ret=$?
     if [ $ret -eq 0 ]; then break; fi
     sleep 10
  done
  oc exec -it -n imperative bandini -- bash
}

podrun() {
    set -x
    if [ -z $2 ]; then
        ARG="/bin/sh"
    else
        ARG=$2
    fi
    podman run -it --security-opt label=disable --rm -v /home/michele:/home/michele:rw --workdir /home/michele --net=host --rm $1 "$ARG"
}

if [ -f "${SSH_ENV}" ]; then
        . "${SSH_ENV}" > /dev/null
        ps -ef | grep ${SSH_AGENT_PID} | grep -e "ssh-agent$" > /dev/null || { start_agent; }
else
        start_agent;
fi

export DOTNET_CLI_TELEMETRY_OPTOUT=1

unset PAGER

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
#eval "$(starship init zsh)"
